#define _TYPE_QUANT 0x1
#define _TYPE_FORWARD 0x2
#define _TYPE_BACKWARD 0x4
#define _TYPE_PATTERN 0x8
#define _TYPE_INTRA 0x10

//define macroblock 
#define _END_OF_BLOCK -1
#define _ESCAPE -2
#define _RUN  31
#define _LEVEL 5

int macroBlockIncrementalData[33*3] = {  
0x001, 1, 1,
0x003, 3, 2,
0x002, 3, 3,
0x003, 4, 4,
0x002, 4, 5,
0x003, 5, 6,
0x002, 5, 7,
0x007, 7, 8,
0x006, 7, 9,
0x00B, 8, 10,
0x00A, 8, 11,
0x009, 8, 12,
0x008, 8, 13,
0x007, 8, 14,
0x006, 8, 15,
0x017, 10, 16,
0x016, 10, 17,
0x015, 10, 18,
0x014, 10, 19,
0x013, 10, 20,
0x012, 10, 21,
0x023, 11, 22,
0x022, 11, 23,
0x021, 11, 24,
0x020, 11, 25,
0x01F, 11, 26,
0x01E, 11, 27,
0x01D, 11, 28,
0x01C, 11, 29,
0x01B, 11, 30,
0x01A, 11, 31,
0x019, 11, 32,
0x018, 11, 33
   };
   
int macroBlockTypeIData [2*3] = {
0x1, 1, _TYPE_INTRA,
0x1, 2, _TYPE_QUANT+_TYPE_INTRA
};
  
int macroBlockTypePData [7*3] = {
0x1, 1, _TYPE_FORWARD+_TYPE_PATTERN,
0x1, 2, _TYPE_PATTERN,
0x1, 3, _TYPE_FORWARD,
0x3, 5, _TYPE_INTRA,
0x2, 5, _TYPE_QUANT+_TYPE_FORWARD+_TYPE_PATTERN,
0x1, 5, _TYPE_QUANT+_TYPE_PATTERN,
0x1, 6, _TYPE_QUANT+_TYPE_INTRA
};
   
int macroBlockTypeBData [11*3] = {
0x2, 2, _TYPE_FORWARD+_TYPE_BACKWARD,
0x3, 2, _TYPE_FORWARD+_TYPE_BACKWARD+_TYPE_PATTERN,
0x2, 3, _TYPE_BACKWARD,
0x3, 3, _TYPE_BACKWARD+_TYPE_PATTERN,
0x2, 4, _TYPE_FORWARD,
0x3, 4, _TYPE_FORWARD+_TYPE_PATTERN,
0x3, 5, _TYPE_INTRA,
0x2, 5, _TYPE_QUANT+_TYPE_FORWARD+_TYPE_BACKWARD+_TYPE_PATTERN,
0x3, 6, _TYPE_QUANT+_TYPE_FORWARD+_TYPE_PATTERN,
0x2, 6, _TYPE_QUANT+_TYPE_BACKWARD+_TYPE_PATTERN,
0x1, 6, _TYPE_QUANT+_TYPE_INTRA
};
int macroBlockTypeDData [1*3] ={
0x1, 1, _TYPE_INTRA
};
 
int macroBlockPatternData [63*3] = {
0x07, 3, 60,
0x0D, 4, 4,
0x0C, 4, 8,
0x0B, 4, 16,
0x0A, 4, 32,
0x13, 5, 12,
0x12, 5, 48,
0x11, 5, 20,
0x10, 5, 40,
0x0F, 5, 28,
0x0E, 5, 44,
0x0D, 5, 52,
0x0C, 5, 56,
0x0B, 5, 1,
0x0A, 5, 61,
0x09, 5, 2,
0x08, 5, 62,
0x0F, 6, 24,
0x0E, 6, 36,
0x0D, 6, 3,
0x0C, 6, 63,
0x17, 7, 5,
0x16, 7, 9,
0x15, 7, 17,
0x14, 7, 33,
0x13, 7, 6,
0x12, 7, 10,
0x11, 7, 18,
0x10, 7, 34,
0x1F, 8, 7,
0x1E, 8, 11,
0x1D, 8, 19,
0x1C, 8, 35,
0x1B, 8, 13,
0x1A, 8, 49,
0x19, 8, 21,
0x18, 8, 41,
0x17, 8, 14,
0x16, 8, 50,
0x15, 8, 22,
0x14, 8, 42,
0x13, 8, 15,
0x12, 8, 51,
0x11, 8, 23,
0x10, 8, 43,
0x0F, 8, 25,
0x0E, 8, 37,
0x0D, 8, 26,
0x0C, 8, 38,
0x0B, 8, 29,
0x0A, 8, 45,
0x09, 8, 53,
0x08, 8, 57,
0x07, 8, 30,
0x06, 8, 46,
0x05, 8, 54,
0x04, 8, 58,
0x07, 9, 31,
0x06, 9, 47,
0x05, 9, 55,
0x04, 9, 59,
0x03, 9, 27,
0x02, 9, 39
};
int macroBlockMotionData [33*3] = {
0x019, 11, -16,
0x01B, 11, -15,
0x01D, 11, -14,
0x01F, 11, -13,
0x021, 11, -12,
0x023, 11, -11,
0x013, 10, -10,
0x015, 10, -9,
0x017, 10, -8,
0x07, 8, -7,
0x09, 8, -6,
0x0B, 8, -5,
0x07, 7, -4,
0x03, 5, -3,
0x3, 4, -2,
0x3, 3, -1,
0x1, 1, 0,
0x2, 3, 1,
0x2, 4, 2,
0x02, 5, 3,
0x06, 7, 4,
0x0A, 8, 5,
0x08, 8, 6,
0x06, 8, 7,
0x016, 10, 8,
0x014, 10, 9,
0x012, 10, 10,
0x022, 11, 11,
0x020, 11, 12,
0x01E, 11, 13,
0x01C, 11, 14,
0x01A, 11, 15,
0x018, 11, 16,
};

int dctDCLuminanceSizeData [9*3]= {
0x4, 3, 0,
0x0, 2, 1,
0x1, 2, 2,
0x5, 3, 3,
0x6, 3, 4,
0xE, 4, 5,
0x1E, 5, 6,
0x3E, 6, 7,
0x7E, 7, 8,
};

int dctDCChrominanceSizeData [9*3] = {
0x0, 2, 0,
0x1, 2, 1,
0x2, 2, 2,
0x6, 3, 3,
0xE, 4, 4,
0x1E, 5, 5,
0x3E, 6, 6,
0x7E, 7, 7,
0xFE, 8, 8
};

int dctCoefficientFirstData [113*3] ={
0x2, 2, _END_OF_BLOCK,
0x1, 1, 32,
0x3, 3, 33,
0x4, 4, 64,
0x5, 4, 34,
0x05, 5, 96,
0x07, 5, 35,
0x06, 5, 36,
0x06, 6, 65,
0x07, 6, 37,
0x05, 6, 38,
0x04, 6, 39,
0x06, 7, 128,
0x04, 7, 66,
0x07, 7, 40,
0x05, 7, 41,
0x01, 6, _ESCAPE,
0x26, 8, 160,
0x21, 8, 192,
0x25, 8, 97,
0x24, 8, 67,
0x27, 8, 42,
0x23, 8, 43,
0x22, 8, 44,
0x20, 8, 45,
0x00A, 10, 224,
0x00C, 10, 129,
0x00B, 10, 98,
0x00F, 10, 68,
0x009, 10, 69,
0x00E, 10, 46,
0x00D, 10, 47,
0x008, 10, 48,
0x01D, 12, 256,
0x018, 12, 288,
0x013, 12, 320,
0x010, 12, 352,
0x01B, 12, 161,
0x014, 12, 130,
0x01C, 12, 99,
0x012, 12, 100,
0x01E, 12, 70,
0x015, 12, 71,
0x011, 12, 72,
0x01F, 12, 49,
0x01A, 12, 50,
0x019, 12, 51,
0x017, 12, 52,
0x016, 12, 53,
0x001A, 13, 384,
0x0019, 13, 416,
0x0018, 13, 448,
0x0017, 13, 480,
0x0016, 13, 193,
0x0015, 13, 225,
0x0014, 13, 162,
0x0013, 13, 131,
0x0012, 13, 101,
0x0011, 13, 73,
0x0010, 13, 74,
0x001F, 13, 54,
0x001E, 13, 55,
0x001D, 13, 56,
0x001C, 13, 57,
0x001B, 13, 58,
0x001F, 14, 512,
0x001E, 14, 544,
0x001D, 14, 576,
0x001C, 14, 608,
0x001B, 14, 640,
0x001A, 14, 672,
0x0019, 14, 704,
0x0018, 14, 736,
0x0017, 14, 768,
0x0016, 14, 800,
0x0015, 14, 832,
0x0014, 14, 864,
0x0013, 14, 896,
0x0012, 14, 928,
0x0011, 14, 960,
0x0010, 14, 992,
0x0018, 15, 1024,
0x0017, 15, 1056,
0x0016, 15, 1088,
0x0015, 15, 1120,
0x0014, 15, 1152,
0x0013, 15, 1184,
0x0012, 15, 1216,
0x0011, 15, 1248,
0x0010, 15, 1280,
0x001F, 15, 257,
0x001E, 15, 289,
0x001D, 15, 321,
0x001C, 15, 353,
0x001B, 15, 385,
0x001A, 15, 417,
0x0019, 15, 449,
0x0013, 16, 481,
0x0012, 16, 513,
0x0011, 16, 545,
0x0010, 16, 577,
0x0014, 16, 102,
0x001A, 16, 75,
0x0019, 16, 76,
0x0018, 16, 77,
0x0017, 16, 78,
0x0016, 16, 79,
0x0015, 16, 80,
0x001F, 16, 59,
0x001E, 16, 60,
0x001D, 16, 61,
0x001C, 16, 62,
0x001B, 16, 63
   };

int dctCoefficientNextData [113*3] = {
0x2, 2, _END_OF_BLOCK,
0x3, 2, 32,
0x3, 3, 33,
0x4, 4, 64,
0x5, 4, 34,
0x05, 5, 96,
0x07, 5, 35,
0x06, 5, 36,
0x06, 6, 65,
0x07, 6, 37,
0x05, 6, 38,
0x04, 6, 39,
0x06, 7, 128,
0x04, 7, 66,
0x07, 7, 40,
0x05, 7, 41,
0x01, 6, _ESCAPE,
0x26, 8, 160,
0x21, 8, 192,
0x25, 8, 97,
0x24, 8, 67,
0x27, 8, 42,
0x23, 8, 43,
0x22, 8, 44,
0x20, 8, 45,
0x00A, 10, 224,
0x00C, 10, 129,
0x00B, 10, 98,
0x00F, 10, 68,
0x009, 10, 69,
0x00E, 10, 46,
0x00D, 10, 47,
0x008, 10, 48,
0x01D, 12, 256,
0x018, 12, 288,
0x013, 12, 320,
0x010, 12, 352,
0x01B, 12, 161,
0x014, 12, 130,
0x01C, 12, 99,
0x012, 12, 100,
0x01E, 12, 70,
0x015, 12, 71,
0x011, 12, 72,
0x01F, 12, 49,
0x01A, 12, 50,
0x019, 12, 51,
0x017, 12, 52,
0x016, 12, 53,
0x001A, 13, 384,
0x0019, 13, 416,
0x0018, 13, 448,
0x0017, 13, 480,
0x0016, 13, 193,
0x0015, 13, 225,
0x0014, 13, 162,
0x0013, 13, 131,
0x0012, 13, 101,
0x0011, 13, 73,
0x0010, 13, 74,
0x001F, 13, 54,
0x001E, 13, 55,
0x001D, 13, 56,
0x001C, 13, 57,
0x001B, 13, 58,
0x001F, 14, 512,
0x001E, 14, 544,
0x001D, 14, 576,
0x001C, 14, 608,
0x001B, 14, 640,
0x001A, 14, 672,
0x0019, 14, 704,
0x0018, 14, 736,
0x0017, 14, 768,
0x0016, 14, 800,
0x0015, 14, 832,
0x0014, 14, 864,
0x0013, 14, 896,
0x0012, 14, 928,
0x0011, 14, 960,
0x0010, 14, 992,
0x0018, 15, 1024,
0x0017, 15, 1056,
0x0016, 15, 1088,
0x0015, 15, 1120,
0x0014, 15, 1152,
0x0013, 15, 1184,
0x0012, 15, 1216,
0x0011, 15, 1248,
0x0010, 15, 1280,
0x001F, 15, 257,
0x001E, 15, 289,
0x001D, 15, 321,
0x001C, 15, 353,
0x001B, 15, 385,
0x001A, 15, 417,
0x0019, 15, 449,
0x0013, 16, 481,
0x0012, 16, 513,
0x0011, 16, 545,
0x0010, 16, 577,
0x0014, 16, 102,
0x001A, 16, 75,
0x0019, 16, 76,
0x0018, 16, 77,
0x0017, 16, 78,
0x0016, 16, 79,
0x0015, 16, 80,
0x001F, 16, 59,
0x001E, 16, 60,
0x001D, 16, 61,
0x001C, 16, 62,
0x001B, 16, 63
};